import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../../../core/theme/constant/app_colors.dart';
import '../../../core/theme/constant/app_icons.dart';
import '../../../core/utils/common_utils.dart';
import '../../../core/utils/constant/tag.dart';
import '../../../core/utils/logger.dart';
import '../../../domain/model/display/login/auth_type.dart';
import 'bloc/login_bloc.dart';
import 'screens/dialog/login_dialog.dart';
import 'screens/email/email_login_page.dart';
import 'widgets/login_option_item.dart';

/// ## Î°úÍ∑∏Ïù∏ ÌôîÎ©¥
///
/// author [Eogeum@naver.com]
class LoginPage extends StatefulWidget {
  const LoginPage({super.key});

  @override
  State<LoginPage> createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> {
//==============================================================================
//  Fields
//==============================================================================
  final String _tag = Tag.LOGIN;

  late LoginBloc _loginBloc;
  final _authTypeList = AuthType.values;

  @override
  void initState() {
    super.initState();
    _loginBloc = LoginBloc();
    _loginBloc.add(LoginEvent.started());
  }

  @override
  void dispose() {
    _loginBloc.close();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) => BlocProvider(
        create: (_) => _loginBloc,
        child: Scaffold(
          appBar: AppBar(backgroundColor: AppColors.secondary),
          body: BlocConsumer<LoginBloc, LoginState>(
            builder: (context, state) => Container(
              color: AppColors.secondary,
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  // ÏÉÅÎã® Î°úÍ≥† ÏòÅÏó≠
                  Column(
                    children: [
                      Image.asset(AppIcons.mangmung1, width: 200, height: 200),
                      SizedBox(height: 20),
                      Text(
                        'ÎÇòÎßåÏùò Ïó¨Ìñâ ÌîåÎûòÎÑà',
                        style: TextStyle(fontSize: 30, fontWeight: FontWeight.bold),
                      ),
                      Text(
                        'ÎåïÍøÄÌä∏Î¶ΩüçØ',
                        style: TextStyle(fontSize: 33, fontWeight: FontWeight.bold),
                      ),
                    ],
                  ),

                  // ÏÉÅÎã® Î°úÍ≥† ÏòÅÏó≠Í≥º Î°úÍ∑∏Ïù∏ ÏòµÏÖò Î™©Î°ù ÏÇ¨Ïù¥ Ïó¨Î∞±
                  SizedBox(height: 40),

                  // Î°úÍ∑∏Ïù∏ ÏòµÏÖò Î™©Î°ù
                  ListView.separated(
                    shrinkWrap: true,
                    padding: EdgeInsets.symmetric(horizontal: 8),
                    itemCount: _authTypeList.length,
                    itemBuilder: (context, index) => LoginOptionItem(_authTypeList[index]),
                    separatorBuilder: (context, index) => SizedBox(height: 8),
                    physics: NeverScrollableScrollPhysics(), // Ïä§ÌÅ¨Î°§ Í∏∞Îä• Ï†úÍ±∞
                  ),

                  // Î°úÍ∑∏Ïù∏ ÏòµÏÖò Î™©Î°ù ÌïòÎã® Ïó¨Î∞±
                  SizedBox(height: 20),
                ],
              ),
            ),
            listener: (context, state) {
              CustomLogger.logger.i('$_tag State Changed. state = ${state.runtimeType}');
              state.when(
                initial: () {},
                alreadyLoggedIn: _onAlreadyLoggedIn,
                emailDuplicateError: (email) => LoginDialog.showEmailDuplicateDialog(context, email),
                requireMoreUserInfo: _onRequireMoreUserInfo,
                navigateToEmailSignIn: _onNavigateToEmailSignIn,
                loggedIn: _onLoggedIn,
                error: _onError,
              );
            },
          ),
        ),
      );

//==============================================================================
//  Layout
//==============================================================================

//==============================================================================
//  Methods
//==============================================================================
  void _onAlreadyLoggedIn() {
    // Ïù¥ÎØ∏ Î°úÍ∑∏Ïù∏ Îêú Í≤ΩÏö∞ ÌÜ†Ïä§Ìä∏ ÎÖ∏Ï∂ú ÌõÑ Ïù¥Ï†Ñ ÌôîÎ©¥ÏúºÎ°ú Î≥µÍ∑Ä
    CommonUtils.showToastMsg('Ïù¥ÎØ∏ Î°úÍ∑∏Ïù∏ÎêòÏñ¥ ÏûàÏäµÎãàÎã§.');
    Navigator.pop(context, true);
  }

  void _onRequireMoreUserInfo() {
    //eff Ïù¥Î©îÏùº Ï†ïÎ≥¥ Ï∂îÍ∞ÄÎ°ú Î∞õÎçò Ïù¥Î©îÏùº Î°úÍ∑∏Ïù∏ÏúºÎ°ú Ï†ÑÌôòÌïòÎçò Ìï¥ÏïºÌï®
  }

  void _onLoggedIn() {
    // Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µÌïú Í≤ΩÏö∞ Ïù¥Ï†Ñ ÌôîÎ©¥ÏúºÎ°ú Î≥µÍ∑Ä
    Navigator.pop(context, true);
  }

  void _onError() {
    //ett ÌÜ†Ïä§Ìä∏ Î∂àÌïÑÏöîÌïú Í≤ΩÏö∞ÏóêÎèÑ ÎÖ∏Ï∂úÎê† Ïàò ÏûàÏùå ÌôïÏù∏Ìï¥ÏïºÌï®.
    CommonUtils.showToastMsg('Ïïå Ïàò ÏóÜÎäî Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.\nÎã§Î•∏ Î∞©Î≤ïÏúºÎ°ú Î°úÍ∑∏Ïù∏ÌïòÍ±∞ÎÇò Îã§Ïãú ÏãúÎèÑÌï¥ Ï£ºÏÑ∏Ïöî.');
  }

  void _onNavigateToEmailSignIn() {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => EmailLoginPage(),
      ),
    );
  }
}
